- hosts: w_ws_tmp
  connection: local
  tasks:

    - name: Копирование 1с Setup.ini для проверки версии
      ansible.windows.win_copy:
        src: \\server\path\to\1c_source\Setup.ini
        dest: C:\Temp
        remote_src: yes
      become_method: runas
      become_flags: logon_type=new_credentials logon_flags=netcredentials_only
      vars:
        ansible_become: yes
      register: copy_1c_ini
      ignore_errors: True

####### 1c #######
    - name: Получить версию инсталлятора
      ansible.windows.win_powershell:
        script: |
          Get-Content "C:\Temp\Setup.ini" |
          foreach-object -begin {$h=@{}} -End {echo $h["Startup"]["ProductVersion"]; } -process { if ($_ -match "^\[(.+)\]$") {$section=$matches[1]; $h[$matches[1]]=@{}} if ($_ -match "(.+)=(.+)"){ $name,$value = $matches[1..2]; $h[$section][$name] = $value; }}
      ignore_errors: True
      register: version_1c
      when:
        - copy_1c_ini.failed != true

    - name: Проверить установленную версию 1с
      ansible.windows.win_powershell:
        script: |
          Get-WmiObject -Class Win32_Product | where vendor -eq 1С-Софт | select Version
      ignore_errors: True
      register: installed_1c_v
      when:
        - copy_1c_ini.failed != true

    - name: Остановка запущенных процессов
      ansible.windows.win_powershell:
        script: |
          if ("{{ item.Version }}" -ne "{{ version_1c.output[0] }}") {taskkill /IM "1cv8*" /F }
      ignore_errors: True
      loop: "{{ installed_1c_v.output }}"
      when:
        - copy_1c_ini.failed != true

    - name: Очистка кэша
      ansible.windows.win_powershell:
        script: |
          if ("{{ item.Version }}" -ne "{{ version_1c.output[0] }}") {dir C:\Users |
          select name |
          foreach-object -process { $tmp=$_.Name; if (Test-Path -Path "C:\Users\$tmp\AppData\Local\1C" ) {Remove-Item "C:\Users\$tmp\AppData\Local\1C" -Recurse}; if (Test-Path -Path "C:\Users\$tmp\AppData\R>
      ignore_errors: True
      loop: "{{ installed_1c_v.output }}"
      when:
        - copy_1c_ini.failed != true

    - name: Удаление других версий
      ansible.windows.win_powershell:
        script: |
          if ("{{ item.Version }}" -ne "{{ version_1c.output[0] }}") { Get-WmiObject -Class Win32_Product | where vendor -eq 1С-Софт | where version -eq "{{ item.Version }}" | Remove-WmiObject }
      ignore_errors: True
      loop: "{{ installed_1c_v.output }}"
      when:
        - copy_1c_ini.failed != true

    - name: Повторная проверка установленной версии 1с
      ansible.windows.win_powershell:
        script: |
          Get-WmiObject -Class Win32_Product | where vendor -eq 1С-Софт | where version -eq "{{ version_1c.output[0] }}" | select Version
      ignore_errors: True
      register: installed_1c_v_retry
      when:
        - copy_1c_ini.failed != true
        - version_1c.output[0] is defined

    - name: Остановка запущенных процессов
      ansible.windows.win_powershell:
        script: |
          if ("{{ item.Version }}" -ne "{{ version_1c.output[0] }}") {taskkill /IM "1cv8*" /F }
      ignore_errors: True
      loop: "{{ installed_1c_v.output }}"
      when:
        - copy_1c_ini.failed != true

    - name: Очистка кэша
      ansible.windows.win_powershell:
        script: |
          if ("{{ item.Version }}" -ne "{{ version_1c.output[0] }}") {dir C:\Users |
          select name |
          foreach-object -process { $tmp=$_.Name; if (Test-Path -Path "C:\Users\$tmp\AppData\Local\1C" ) {Remove-Item "C:\Users\$tmp\AppData\Local\1C" -Recurse}; if (Test-Path -Path "C:\Users\$tmp\AppData\R>
      ignore_errors: True
      loop: "{{ installed_1c_v.output }}"
      when:
        - copy_1c_ini.failed != true

    - name: Удаление других версий
      ansible.windows.win_powershell:
        script: |
          if ("{{ item.Version }}" -ne "{{ version_1c.output[0] }}") { Get-WmiObject -Class Win32_Product | where vendor -eq 1С-Софт | where version -eq "{{ item.Version }}" | Remove-WmiObject }
      ignore_errors: True
      loop: "{{ installed_1c_v.output }}"
      when:
        - copy_1c_ini.failed != true

    - name: Повторная проверка установленной версии 1с
      ansible.windows.win_powershell:
        script: |
          Get-WmiObject -Class Win32_Product | where vendor -eq 1С-Софт | where version -eq "{{ version_1c.output[0] }}" | select Version
      ignore_errors: True
      register: installed_1c_v_retry
      when:
        - copy_1c_ini.failed != true
        - version_1c.output[0] is defined
    - name: Копирование дистрибутива 1с
      ansible.windows.win_copy:
        src: \\server\path\to\1c_source\
        dest: C:\Temp\1c_source\
        remote_src: yes
      become_method: runas
      become_flags: logon_type=new_credentials logon_flags=netcredentials_only
      vars:
        ansible_become: yes
      register: copy_1c_dst
      ignore_errors: True
      when:
        - installed_1c_v_retry.output[0].Version is not defined

    - name: Установка актуальной 1с
      ansible.windows.win_powershell:
        script: |
          Start-Process "msiexec.exe" -ArgumentList '/i "C:\Temp\1c_source\1CEnterprise 8.msi" /qn TRANSFORMS=adminstallrelogon.mst;1049.mst DESIGNERALLCLIENTS=1 THICKCLIENT=1 THINCLIENTFILE=1 THINCLIENT=1 >
      ignore_errors: True
      when:
        - installed_1c_v_retry.output[0].Version is not defined

    - name: Копирование настроек баз
      ansible.windows.win_copy:
        src: \\server\path\to\1cestart\1cestart.cfg
        dest: C:\ProgramData\1C\1CEStart\1cestart.cfg
        remote_src: yes
      become_method: runas
      become_flags: logon_type=new_credentials logon_flags=netcredentials_only
      vars:
        ansible_become: yes
      ignore_errors: True
      when:
        - installed_1c_v_retry.output[0].Version is not defined

    - name: Удаление дистрибутива
      ansible.windows.win_file:
        path: C:\Temp\1c_source
        state: absent
      ignore_errors: True




